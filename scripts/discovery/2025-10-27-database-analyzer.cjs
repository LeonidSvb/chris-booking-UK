const https = require('https');
const http = require('http');
const fs = require('fs');
const path = require('path');

class DatabaseAPI {
  constructor(apiUrl, apiSecret) {
    this.apiUrl = apiUrl;
    this.apiSecret = apiSecret;
  }

  async request(action, data = {}) {
    return new Promise((resolve, reject) => {
      const url = new URL(this.apiUrl);
      const isHttps = url.protocol === 'https:';
      const client = isHttps ? https : http;

      const postData = JSON.stringify({ action, ...data });

      const options = {
        hostname: url.hostname,
        port: url.port || (isHttps ? 443 : 80),
        path: url.pathname + url.search,
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Content-Length': Buffer.byteLength(postData),
          'X-API-Secret': this.apiSecret
        }
      };

      const req = client.request(options, (res) => {
        let data = '';

        res.on('data', (chunk) => {
          data += chunk;
        });

        res.on('end', () => {
          try {
            const response = JSON.parse(data);
            if (response.error) {
              reject(new Error(response.error));
            } else {
              resolve(response);
            }
          } catch (e) {
            reject(new Error(`Failed to parse response: ${data}`));
          }
        });
      });

      req.on('error', (e) => {
        reject(e);
      });

      req.write(postData);
      req.end();
    });
  }

  async listTables() {
    return this.request('list_tables');
  }

  async describeTable(table) {
    return this.request('describe_table', { table });
  }

  async query(sql) {
    return this.request('query', { sql });
  }

  async getSample(table, limit = 10) {
    return this.request('get_sample', { table, limit });
  }

  async getStats() {
    return this.request('get_stats');
  }
}

async function analyzeDatabase() {
  // –ù–ê–°–¢–†–û–ô–ö–ò - –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –†–ï–ê–õ–¨–ù–´–ï –ü–û–°–õ–ï –£–°–¢–ê–ù–û–í–ö–ò API
  const API_URL = 'https://bookingbrain.co.uk/db-api.php';
  const API_SECRET = 'change_this_secret_key_12345'; // –ö–ª–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–æ–±—â–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á

  console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API...\n');

  const db = new DatabaseAPI(API_URL, API_SECRET);
  const reportData = {
    timestamp: new Date().toISOString(),
    database: 'bookingbrain',
    analysis: {}
  };

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
    const stats = await db.getStats();
    reportData.stats = stats.stats;

    console.log(`\n‚úì –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: ${stats.stats.total_tables}`);
    console.log('\n–¢–∞–±–ª–∏—Ü—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:');
    for (const [table, info] of Object.entries(stats.stats.tables)) {
      console.log(`  - ${table}: ${info.row_count} –∑–∞–ø–∏—Å–µ–π`);
    }

    // 2. –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
    console.log('\n\nüìã –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü...\n');
    const tables = stats.stats.tables;
    reportData.tables = {};

    for (const tableName of Object.keys(tables)) {
      console.log(`\n--- –¢–∞–±–ª–∏—Ü–∞: ${tableName} ---`);

      // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã
      const structure = await db.describeTable(tableName);
      reportData.tables[tableName] = {
        row_count: structure.row_count,
        columns: structure.columns
      };

      console.log(`–ö–æ–ª–æ–Ω–∫–∏ (${structure.columns.length}):`);
      structure.columns.forEach(col => {
        const key = col.Key ? `[${col.Key}]` : '';
        const extra = col.Extra ? `[${col.Extra}]` : '';
        console.log(`  ${col.Field}: ${col.Type} ${key} ${extra}`);
      });

      // –û–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö
      if (structure.row_count > 0) {
        console.log(`\n–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–∞ –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏)...`);
        const sample = await db.getSample(tableName, 3);
        reportData.tables[tableName].sample = sample.data;

        if (sample.data.length > 0) {
          console.log('–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:');
          console.log(JSON.stringify(sample.data, null, 2));
        }
      }

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 100));
    }

    // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    const reportPath = path.join(__dirname, 'database-analysis-report.json');
    fs.writeFileSync(reportPath, JSON.stringify(reportData, null, 2));
    console.log(`\n\n‚úì –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);

    // 4. –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞
    console.log('\n\nüìà –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê:\n');
    console.log(`–í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: ${stats.stats.total_tables}`);

    let totalRows = 0;
    for (const info of Object.values(stats.stats.tables)) {
      totalRows += info.row_count;
    }
    console.log(`–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${totalRows}`);

    // –°–∞–º—ã–µ –±–æ–ª—å—à–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    const sortedTables = Object.entries(stats.stats.tables)
      .sort((a, b) => b[1].row_count - a[1].row_count)
      .slice(0, 5);

    console.log('\n–¢–æ–ø-5 —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü:');
    sortedTables.forEach(([name, info], index) => {
      console.log(`  ${index + 1}. ${name}: ${info.row_count} –∑–∞–ø–∏—Å–µ–π`);
    });

    console.log('\n\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log('–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ AI-–∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏ –±–∏–∑–Ω–µ—Å-–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.');

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞:', error.message);

    if (error.message.includes('Unauthorized')) {
      console.error('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.error('  1. API —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
      console.error('  2. –ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á');
      console.error('  3. –ù–µ–≤–µ—Ä–Ω—ã–π URL API');
    } else if (error.message.includes('ENOTFOUND') || error.message.includes('ECONNREFUSED')) {
      console.error('\nüí° –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
      console.error('  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL API');
    }
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
analyzeDatabase();
